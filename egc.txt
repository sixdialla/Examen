= Ejercicio 1 =

1) Cree un repositorio git a partir del contenido del fichero .zip
   que se le ofrece.

2) En una rama denominada 'next', mueva el método multiplica a la clase
   App1 y elimine la clase App2.

3) La clase App1 dispone del método divide() que contiene un error
   de programación pues devuelve la multiplicación en lugar de la
   división. Corrija el problema y aplique el cambio al repositorio
   en la rama 'next'.

4) Realice un commit que renombre divide() a multiplica()

5) Revierta el commit que acaba de realizar.

6) Desde la rama 'master' renombre la clase App1 de manera que su nuevo
   nombre sea MisMatematicas.

7) Una la rama 'next' a la rama 'master'.

8) Entrega: Envíe un fichero zip con la carpeta al email: pneira@us.es.
Emplee como asunto [EGC][1EJ] Apellidos, Nombre. Ponga en copia también el correo electrónico del profesor que está en el aula para que pueda comprobar la entrega.

IMPORTANTE: Si no has hecho el ejercicio, envía el correo con el contenido: "No realizado". Si falta correo para algún ejercicio se considerará como NO PRESENTADO a la totalidad del examen.


= Ejercicio 2 =

1) Crea un pom.xml para que Maven compile adecuadamente el proyecto teniendo en cuenta que:
   - El proyecto debe pertenecer al grupo es.us.egc, su formato de empaquetamiento debe ser jar, el artifactId debe ser tu UVUS y la versión debe ser la 1.0.0
   - El proyecto utiliza la librería logback-classic para logging y JUnit 4 para ejecutar las pruebas unitarias.
   - Genere un JAR cuyo punto de entrada sea la clase MisMatematicas.
   - Copie todas las dependencias a una carpeta del proyecto.

2) Crea un fichero Dockerfile que parta de una imagen de Java (por ejemplo, openjdk:8-alpine), añada las dependencias y el JAR y ejecute éste último (el comando para ejecutar en un Dockerfile es CMD).

3) Lanza la imagen de Docker llamada resinas/egc1718 de forma que redirija la carpeta 'content' de tu máquina (incluida en el ZIP) a la carpeta '/files' del contenedor. Crea un fichero docker.txt con el comando de Docker que has utilizado y el contenido que aparece en pantalla.

4) Entrega: Envíe un fichero zip con la carpeta al email: resinas@us.es. Emplee como asunto [EGC][2EJ] Apellidos, Nombre. Ponga en copia también el correo electrónico del profesor que está en el aula para que pueda comprobar la entrega.

IMPORTANTE: Si no has hecho el ejercicio, envía el correo con el contenido: "No realizado". Si falta correo para algún ejercicio se considerará como NO PRESENTADO a la totalidad del examen.

= Ejercicio 3 =

1) Haga un fork del repositorio de GitHub resinas/bye-java. Es un proyecto pensado para generar un JAR que, al ejecutarse, lanzará un servidor web y desplegará en él un API REST de gestión de tareas. La ejecución del JAR se realiza de la forma habitual. Esto es, si el JAR se llamase mijar-1.0.0.jar, se ejecutaría ``java -jar mijar-1.0.0.jar``.

2) Cree un fichero de configuración de Travis CI para que:
   - Realice la construcción automática del proyecto utilizando Open JDK 8 y Oracle JDK 9
   - para que envíe un correo a la dirección one@example.com siempre que haya una nueva build, sólo en caso de éxito.

3) [Sólo para alumnos cuyo peso de las prácticas sea 0.3 en lugar de 0.2] Realice los pasos necesarios para desplegar el proyecto de manera automática en Heroku a través de Travis. Incluya la url del despliegue de la aplicación y del fork del repositorio de GitHub en un fichero README en el proyecto.

4) Entrega: Envía un fichero zip con la carpeta al email: amarquez6@us.es. Emplee como asunto [EGC][3EJ] Apellidos, Nombre. Ponga en copia también el correo electrónico del profesor que está en el aula para que pueda comprobar la entrega.

IMPORTANTE: Si no has hecho el ejercicio, envía el correo con el contenido: "No realizado". Si falta correo para algún ejercicio se considerará como NO PRESENTADO a la totalidad del examen.